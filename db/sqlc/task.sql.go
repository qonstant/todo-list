// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: task.sql

package db

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    title, active_at
) VALUES (
    $1, $2
)
RETURNING id, title, active_at, done, created_at, updated_at
`

type CreateTaskParams struct {
	Title    string    `json:"title"`
	ActiveAt time.Time `json:"active_at"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Title, arg.ActiveAt)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ActiveAt,
		&i.Done,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, title, active_at, done, created_at, updated_at FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ActiveAt,
		&i.Done,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, active_at, done, created_at, updated_at FROM tasks
ORDER BY active_at ASC
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ActiveAt,
			&i.Done,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET 
    title = $2,
    active_at = $3,
    done = $4,
    updated_at = NOW()
WHERE id = $1
RETURNING id, title, active_at, done, created_at, updated_at
`

type UpdateTaskParams struct {
	ID       int64     `json:"id"`
	Title    string    `json:"title"`
	ActiveAt time.Time `json:"active_at"`
	Done     bool      `json:"done"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.ActiveAt,
		arg.Done,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ActiveAt,
		&i.Done,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
